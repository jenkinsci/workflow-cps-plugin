<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License

Copyright 2016 CloudBees, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:l="/lib/layout" xmlns:f="/lib/form" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:local="local">
    <l:layout title="${%Pipeline Syntax: Snippet Generator}" norefresh="true">
        <st:include page="sidepanel"/>
        <l:main-panel>
            <f:form name="config">
                <f:section title="${%Overview}"/>
                <f:block>
                    This <b>Snippet Generator</b> will help you learn the Pipeline Script code which can be used to
                    define various steps. Pick a step you are interested in from the list, configure it,
                    click <b>Generate Pipeline Script</b>, and you will see a Pipeline Script statement that would call the
                    step with that configuration. You may copy and paste the whole statement into your
                    script, or pick up just the options you care about. (Most parameters are optional
                    and can be omitted in your script, leaving them at default values.)
                </f:block>
                <f:section title="${%Steps}"/>
                <!-- Similar to f:dropdownDescriptorSelector, but adds fallback content to block, and JENKINS-25130 adds per-selection help: -->
                <j:set var="item" value="${it.getItem(request)}"/>
                <d:taglib uri="local">
                    <d:tag name="listSteps">
                        <j:forEach var="quasiDescriptor" items="${quasiDescriptors}">
                            <j:set var="descriptor" value="${quasiDescriptor.real}"/>
                            <j:set var="symbol" value="${quasiDescriptor.symbol}"/>
                            <f:dropdownListBlock title="${symbol}: ${descriptor.displayName}" staplerClass="${descriptor.clazz.name}" lazy="descriptor,item,symbol">
                                <l:ajax>
                                    <j:set var="it" value="${item}"/>
                                    <j:set var="instance" value="${null}"/>
                                    <j:set var="help" value="${descriptor.helpFile}"/>
                                    <f:entry title="${symbol}" help="${help}" />
                                    <st:include from="${descriptor}" page="${descriptor.configPage}" optional="true">
                                        <f:block>
                                            ${%This step has not yet defined any visual configuration.}
                                        </f:block>
                                    </st:include>
                                </l:ajax>
                            </f:dropdownListBlock>
                        </j:forEach>
                    </d:tag>
                </d:taglib>
                <f:dropdownList name="prototype" title="${%Sample Step}">
                    <local:listSteps quasiDescriptors="${it.getQuasiDescriptors(false)}"/>
                    <f:dropdownListBlock title="${%— Advanced/Deprecated —}"/>
                    <local:listSteps quasiDescriptors="${it.getQuasiDescriptors(true)}"/>
                </f:dropdownList>
                <f:block>
                    <input type="button" id="generatePipelineScript" value="${%Generate Pipeline Script}"
                           class="submit-button primary"
                           data-url="${rootURL}/${it.GENERATE_URL}"/>
                    <f:textarea id="prototypeText" readonly="true" style="margin-top: 10px"/>
                    <l:copyButton text="" clazz="jenkins-hidden jenkins-!-margin-top-1"/>
                    <st:adjunct includes="org.jenkinsci.plugins.workflow.cps.Snippetizer.handle-prototype"/>
                </f:block>
                <f:section title="${%Global Variables}"/>
                <f:block>
                    There are many features of the Pipeline that are not steps. These are often exposed
                    via global variables, which are not supported by the snippet generator. See the
                    <a href="globals">Global Variables Reference</a> for details.
                </f:block>
            </f:form>
        </l:main-panel>
    </l:layout>
</j:jelly>
