<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License

Copyright 2016 CloudBees, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<?jelly escape-by-default='true'?>
<div>
    <p>
        A quick example:
    </p>
    <pre>node {
    sh 'echo hello world'
}</pre>
    <p>
        You can write any <a href="http://groovy-lang.org/learn.html" target="_blank">Groovy code</a> you need, using Java API calls plus the GDK.
        You can also call <a href="http://javadoc.jenkins-ci.org/" target="_blank">Jenkins APIs</a> and APIs in Jenkins plugins.
        (If <b>Use Groovy Sandbox</b> is checked, or you are not an administrator, not all APIs will be available.)
    </p>
    <p>
        There are many special build steps available, like <code>node</code> and <code>sh</code> in the example.
        Below is a reference listing all steps available with your current set of plugins;
        other plugins offering Pipeline integration may be available on the update center.
    </p>
    <p>
        Step parameters are given as key-value pairs; if there is just one mandatory parameter the name may be omitted, so
    </p>
    <pre>readFile 'build.properties'</pre>
    <p>
        is a shortcut for
    </p>
    <pre>readFile file: 'build.properties'</pre>
    <p>
        but if you specify multiple parameters they must all be named:
    </p>
    <pre>readFile file: 'build.properties', encoding: 'ISO-8859-1'</pre>
    <p>
        Many steps require complex nested configuration for a parameter.
        (And some nested configuration objects in turn have object-typed parameters.)
        There are three ways these nested objects may be specified, in decreasing order of preference:
    </p>
    <ol>
        <li>
            <p>
                Some configuration objects define custom <em>symbols</em>.
                These are used with a notation looking like a step call, or other function call taking a map of named parameters:
            </p>
            <pre>splitTests count(3)</pre>
            <p>
                or to spell out the mandatory parameter names:
            </p>
            <pre>splitTests parallelism: count(size: 3)</pre>
            <p>
                Compare to the equivalent using the older second syntax option:
            </p>
            <pre>splitTests parallelism: [$class: 'CountDrivenParallelism', size: 3]</pre>
            <p>
                Some Pipeline steps delegating to a single object allow the actual step name to be omitted where unambiguous, so you can write simply:
            </p>
            <pre>archiveArtifacts '**.txt'</pre>
            <p>
                rather than:
            </p>
            <pre>step([$class: 'ArtifactArchiver', artifacts: '**.txt'])</pre>
            <p>
                The nested configuration is an actual value which can be saved into variables etc.:
            </p>
            <pre>def parallelism(deterministic) {
    deterministic ? count(3) : time(15)
}
splitTests parallelism(true)</pre>
        </li>
        <li>
            <p>
                As maps of parameters. Default values may be omitted.
                (Note that <code>[1, 2, 3]</code> is a list in Groovy whereas <code>[a: 1, b: 2, c: 3]</code> is a map.)
            </p>
            <p>
                The special map key <code>$class</code> is used to represent the simple or (where necessary) fully-qualified class name
                of the object being requested.
                <code>$class</code> may be omitted where the containing parameter allows only a single kind of nested object (or list of them):
            </p>
            <pre>checkout([$class: 'GitSCM', userRemoteConfigs: [[url: 'git://…'], extensions: [[$class: 'CleanBeforeCheckout']]])</pre>
            <p>
                In this example, <code>GitSCM</code> must be specified to distinguish the kind of <code>SCM</code> used by the <code>delegate</code> of <code>checkout</code>
                (the single mandatory parameter name <code>delegate</code> can be omitted),
                and <code>CleanBeforeCheckout</code> must be specified to distinguish the kind of <code>GitSCMExtension</code> used by the <code>extensions</code> of <code>GitSCM</code>—a “heterogeneous” list;
                but <code>$class: 'UserRemoteConfig'</code> may be omitted since the <code>userRemoteConfigs</code> of <code>GitSCM</code> are defined to contain only <code>UserRemoteConfig</code>s—it is a “homogeneous” list.
                (No such omission is permitted for homogeneous lists in the first syntax.)
            </p>
            <p>
                Note that in cases where a single parameter is given, with the name omitted, and that parameter is a map,
                it must be enclosed in parentheses to avoid a syntactic ambiguity.
                <!-- TODO see comment in Snippetizer about whether a shorter form is possible -->
            </p>
        </li>
        <li>
            <p>
                As actual Java objects:
            </p>
            <pre>import hudson.plugins.git.*
import hudson.plugins.git.extensions.impl.*
checkout(new GitSCM([new UserRemoteConfig('git://…', null, null, null)], null, false, [], null, null, [new CleanBeforeCheckout()]))</pre>
            <p>
                Besides the verbosity, such scripts cannot generally run in the Groovy sandbox without numerous signature approvals,
                making this mode unusable in typical secured Jenkins installations.
            </p>
        </li>
    </ol>
    <p>
        The <b>Snippet Generator</b> tool will produce the first syntax when possible,
        falling back to the second syntax using <code>$class</code> where necessary.
        Symbols are available in Jenkins core 2.2 and later, and some plugins.
    </p>
</div>
